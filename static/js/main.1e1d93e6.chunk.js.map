{"version":3,"sources":["serviceWorker.ts","api/tasks-api.ts","api/todolist-api.ts","utils/error-utils.ts","features/Login/auth-reducer.ts","app/app-reducer.ts","features/Todolists/todolists-reducer.ts","features/Todolists/tasks-reducer.ts","app/store.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/Todolists/Todolist/Task/Task.tsx","features/Todolists/Todolist/Todolist.tsx","features/Todolists/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Login/Login.tsx","app/App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistAPI","todolistId","title","put","delete","post","get","authAPI","data","handleServerAppError","dispatch","messages","length","setAppErrorAC","setAppStatusAC","handleServerNetworkError","error","message","initialState","isLoggedIn","setIsLoggedInAC","value","type","status","isInitialized","v1","changeTodolistEntityStatusAC","id","entityStatus","tasksAPI","taskId","model","ResultResponseCodes","updateTaskTC","domainModel","getState","task","tasks","find","t","apiModel","deadline","description","priority","Low","startDate","then","res","resultCode","success","updateTaskAC","catch","alert","rootReducer","combineReducers","state","action","filter","tl","todoListId","map","todolist","stateCopy","todolists","forEach","app","auth","store","createStore","applyMiddleware","thunk","AddItemForm","React","memo","addItem","disabled","useState","setTitle","setError","addItemHandler","trim","TextField","variant","onChange","e","currentTarget","onKeyPress","key","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","props","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","changeTaskStatus","changeTaskTitle","removeTask","onClickHandler","useCallback","onChangeStatusHandler","newIsDoneValue","checked","Completed","New","onChangeTitleHandler","newTitle","className","Checkbox","Delete","Todolist","demo","useDispatch","useEffect","items","setTasksAC","changeFilter","addTaskFromProps","addTask","changetdltitle","changeTodolistTitle","onAllClickHandler","onActiveClickHandler","onCompletedClickHandler","tasksForTodoList","removeTodolist","style","paddingTop","Button","TodolistsList","useSelector","item","addTaskAC","addTaskTC","changeStatus","changeTodolistFilterAC","removeTaskAC","deleteTasksTC","addTodolist","addTodolistTC","changeTodolistTitleAC","removeTodolistAC","removeTodolistTC","Grid","container","padding","spacing","allTodolistTasks","Paper","elevation","borderRadius","to","Alert","ErrorSnackbar","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","Login","formik","useFormik","validate","values","email","password","initialValues","rememberMe","onSubmit","justify","xs","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","errors","FormControlLabel","control","App","logoutHandler","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","exact","path","render","from","top","textAlign","width","CircularProgress","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.1e1d93e6.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {instance} from './todolist-api'\r\n\r\n\r\n// api\r\nexport const tasksAPI = {\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponseType>(`todo-lists/${todolistId}/tasks`)\r\n    },\r\n    deleteTasks(todolistId: string, taskId: string) {\r\n        return instance.delete<BaseResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n    },\r\n    createTasks(todolistId: string, title: string) {\r\n        return instance.post<BaseResponseType<{item: TaskType}>>(`todo-lists/${todolistId}/tasks`, {title})\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<BaseResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model)\r\n    }\r\n}\r\n\r\n// types\r\nexport enum TaskStatuses {\r\n    New,\r\n    InProgress,\r\n    Completed,\r\n    Draft\r\n}\r\nexport enum TaskPriorities {\r\n    Low,\r\n    Middle,\r\n    Hi,\r\n    Urgently,\r\n    Later\r\n}\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    description: string\r\n    title: string\r\n    status: number\r\n    priority: number\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponseType = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\ntype BaseResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}","import axios from \"axios\";\r\n\r\nconst settings = {\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.1/\",\r\n    withCredentials: true,\r\n    headers: {\r\n        \"API-KEY\": \"42c688ff-b242-4cda-ac99-6e02679c3ff4\"\r\n    }\r\n}\r\n\r\n\r\nexport const instance = axios.create({\r\n        ...settings\r\n    })\r\n\r\n// api\r\nexport const todolistAPI = {\r\n    updateTodolist(todolistId: string, title: string) {\r\n        return instance.put<BaseResponseType>(`todo-lists/${todolistId}`, {title})\r\n    },\r\n    deleteTodolist(todolistId: string) {\r\n        return instance.delete<BaseResponseType>(`todo-lists/${todolistId}`)\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<BaseResponseType<{item: TodolistType}>>(`todo-lists`, {title})\r\n    },\r\n    postTodolist() {\r\n        return instance.get<Array<TodolistType>>(`todo-lists`)\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        const promise = instance.post<BaseResponseType<{userId?: number}>>('auth/login', data);\r\n        return promise;\r\n    },\r\n    logout() {\r\n        const promise = instance.delete<BaseResponseType<{userId?: number}>>('auth/login');\r\n        return promise;\r\n    },\r\n    me() {\r\n        const promise =  instance.get<BaseResponseType<{id: number; email: string; login: string}>>('auth/me');\r\n        return promise\r\n    }\r\n}\r\n\r\n// types\r\nexport type TodolistType= {\r\n    id: string\r\n    addedDate: string\r\n    order: number\r\n    title: string\r\n}\r\n\r\nexport type BaseResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}","import {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../app/app-reducer'\r\nimport {BaseResponseType} from '../api/todolist-api'\r\nimport {Dispatch} from 'redux'\r\n\r\nexport const handleServerAppError = <D>(data: BaseResponseType<D>, dispatch:\r\n    Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorAC('Some error occurred'))\r\n    }\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppErrorAC(error.message ? error.message : 'Some error occurred'))\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n","import {Dispatch} from 'redux'\r\nimport {SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils'\r\nimport { authAPI, LoginParamsType } from '../../api/todolist-api'\r\n\r\nconst initialState: InitialStateType = {\r\n    isLoggedIn: false\r\n}\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'login/SET-IS-LOGGED-IN':\r\n            return {...state, isLoggedIn: action.value}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\n\r\nexport const setIsLoggedInAC = (value: boolean) =>\r\n    ({type: 'login/SET-IS-LOGGED-IN', value} as const)\r\n\r\n// thunks\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch<ActionsType | SetAppStatusActionType | SetAppErrorActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.login(data)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(true))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const logoutTC = () => (dispatch: Dispatch<ActionsType | SetAppStatusActionType | SetAppErrorActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.logout()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(false))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\n// types\r\n\r\ntype ActionsType = ReturnType<typeof setIsLoggedInAC>\r\ntype InitialStateType = {\r\n    isLoggedIn: boolean\r\n}\r\n\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType | SetAppErrorActionType>\r\n","import {Dispatch} from 'redux'\r\nimport {setIsLoggedInAC} from '../features/Login/auth-reducer'\r\nimport {authAPI} from '../api/todolist-api'\r\n\r\nconst initialState: InitialStateType = {\r\n    status: 'idle',\r\n    error: null,\r\n    isInitialized: false\r\n}\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        case 'APP/SET-IS-INITIALIED':\r\n            return {...state, isInitialized: action.value}\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type InitialStateType = {\r\n    // происходит ли сейчас взаимодействие с сервером\r\n    status: RequestStatusType\r\n    // если ошибка какая-то глобальная произойдёт - мы запишем текст ошибки сюда\r\n    error: string | null\r\n    // true когда приложение проинициализировалось (проверили юзера, настройки получили и т.д.)\r\n    isInitialized: boolean\r\n}\r\n\r\nexport const setAppErrorAC = (error: string | null) => ({type: 'APP/SET-ERROR', error} as const)\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: 'APP/SET-STATUS', status} as const)\r\nexport const setAppInitializedAC = (value: boolean) => ({type: 'APP/SET-IS-INITIALIED', value} as const)\r\n\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n    authAPI.me().then(res => {\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedInAC(true))\r\n        } else {\r\n        }\r\n        dispatch(setAppInitializedAC(true))\r\n    })\r\n}\r\n\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\n\r\ntype ActionsType =\r\n    | SetAppErrorActionType\r\n    | SetAppStatusActionType\r\n    | ReturnType<typeof setAppInitializedAC>","import {v1} from 'uuid'\r\nimport {todolistAPI, TodolistType} from '../../api/todolist-api'\r\nimport {Dispatch} from 'redux'\r\nimport {\r\n    setAppStatusAC,\r\n    SetAppStatusActionType,\r\n    RequestStatusType,\r\n    setAppErrorAC,\r\n    SetAppErrorActionType\r\n} from '../../app/app-reducer'\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils'\r\nimport {AxiosError} from 'axios'\r\n\r\n\r\nexport let todolistId1 = v1()\r\nexport let todolistId2 = v1()\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id !== action.todolistId)\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.todolist, filter: 'all', entityStatus: 'idle'}, ...state]\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.todolistId ? {...tl, title: action.title} : tl)\r\n        case 'CHANGE-TODOLIST-FILTER'        :\r\n            return state.map(tl => tl.id === action.todolistId ? {...tl, filter: action.filter} : tl)\r\n        case 'CHANGE-TODOLIST-ENTITY-STATUS':\r\n            return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.entityStatus} : tl)\r\n        case 'SET-TODOLISTS':\r\n            return action.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTodolistAC = (todolistId: string) => ({\r\n    type: 'REMOVE-TODOLIST',\r\n    todolistId\r\n}) as const\r\nexport const addTodolistAC = (todolist: TodolistType) => ({\r\n    type: 'ADD-TODOLIST',\r\n    todolist\r\n}) as const\r\nexport const changeTodolistTitleAC = (todolistId: string, title: string) => ({\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    title,\r\n    todolistId\r\n}) as const\r\nexport const changeTodolistFilterAC = (filter: FilterValuesType, todolistId: string) => ({\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    filter,\r\n    todolistId\r\n}) as const\r\nexport const changeTodolistEntityStatusAC = (id: string, entityStatus: RequestStatusType) => ({\r\n    type: 'CHANGE-TODOLIST-ENTITY-STATUS',\r\n    id,\r\n    entityStatus\r\n} as const)\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => ({\r\n    type: 'SET-TODOLISTS',\r\n    todolists\r\n}) as const\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = () => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistAPI.postTodolist()\r\n        .then((res) => {\r\n            dispatch(setTodolistsAC(res.data))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n        .catch(error => {\r\n            handleServerNetworkError(error, dispatch);\r\n        })\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    dispatch(changeTodolistEntityStatusAC(todolistId, 'loading'))\r\n    todolistAPI.deleteTodolist(todolistId)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(removeTodolistAC(todolistId))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error: AxiosError) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const addTodolistTC = (title: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistAPI.createTodolist(title)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(addTodolistAC(res.data.data.item))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error: AxiosError) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const changeTodolistTC = (todolistId: string, title: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistAPI.updateTodolist(todolistId, title)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(changeTodolistTitleAC(todolistId, title))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error: AxiosError) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\n// types\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed'\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\ntype ActionsType =\r\n    | ReturnType<typeof removeTodolistAC>\r\n    | ReturnType<typeof addTodolistAC>\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | ReturnType<typeof changeTodolistEntityStatusAC>\r\n    | ReturnType<typeof setTodolistsAC>\r\n    | SetAppStatusActionType\r\n    | SetAppErrorActionType\r\n","import {\r\n    AddTodolistActionType,\r\n    changeTodolistEntityStatusAC,\r\n    RemoveTodolistActionType,\r\n    SetTodolistsActionType\r\n} from './todolists-reducer'\r\nimport {TasksStateType} from '../../app/App'\r\nimport {TaskPriorities, tasksAPI, TaskType, UpdateTaskModelType} from '../../api/tasks-api'\r\nimport {Dispatch} from 'redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils'\r\nimport {AxiosError} from 'axios'\r\n\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(tl => tl.id !== action.taskId)}\r\n        case 'ADD-TASK':\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        case 'UPDATE-TASK':\r\n            return {\r\n                ...state, [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.id\r\n                        ? {...t, ...action.model} : t)\r\n            }\r\n        case 'ADD-TODOLIST':\r\n            return {...state, [action.todolist.id]: []}\r\n        case 'REMOVE-TODOLIST': {\r\n            const stateCopy = {...state}\r\n            delete stateCopy[action.todolistId]\r\n            return stateCopy\r\n        }\r\n        case 'SET-TODOLISTS': {\r\n            const stateCopy = {...state}\r\n            action.todolists.forEach(tl => {\r\n                stateCopy[tl.id] = []\r\n            })\r\n            return stateCopy\r\n        }\r\n        case 'SET-TASKS':\r\n            return {...state, [action.todolistId]: action.tasks}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTaskAC = (taskId: string, todolistId: string) => {\r\n    return {\r\n        type: 'REMOVE-TASK',\r\n        taskId,\r\n        todolistId\r\n    } as const\r\n}\r\nexport const addTaskAC = (task: TaskType) => ({\r\n    type: 'ADD-TASK',\r\n    task\r\n}) as const\r\nexport const updateTaskAC = (id: string, model: UpdateDomainTaskModelType, todolistId: string) => ({\r\n    type: 'UPDATE-TASK',\r\n    id,\r\n    model,\r\n    todolistId\r\n}) as const\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) => ({\r\n    type: 'SET-TASKS',\r\n    tasks,\r\n    todolistId\r\n}) as const\r\n\r\nenum ResultResponseCodes {\r\n    'success' = 0,\r\n    'failed' = 1,\r\n    'captcha' = 2\r\n}\r\n\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    tasksAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            dispatch(setTasksAC(tasks, todolistId))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n        .catch(error => {\r\n            handleServerNetworkError(error, dispatch);\r\n        })\r\n}\r\nexport const deleteTasksTC = (taskId: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    dispatch(changeTodolistEntityStatusAC(todolistId, 'loading'))\r\n    tasksAPI.deleteTasks(todolistId, taskId)\r\n        .then((res) => {\r\n            if (res.data.resultCode === ResultResponseCodes.success) {\r\n                dispatch(removeTaskAC(taskId, todolistId))\r\n                dispatch(changeTodolistEntityStatusAC(todolistId, 'succeeded'))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error: AxiosError) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    dispatch(changeTodolistEntityStatusAC(todolistId, 'loading'))\r\n    tasksAPI.createTasks(todolistId, title)\r\n        .then((res) => {\r\n            if (res.data.resultCode === ResultResponseCodes.success) {\r\n                const task = res.data.data.item\r\n                dispatch(addTaskAC(task))\r\n                dispatch(changeTodolistEntityStatusAC(todolistId, 'succeeded'))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error: AxiosError) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const updateTaskTC = (id: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: Dispatch<ActionsType>, getState: () => AppRootStateType) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        dispatch(changeTodolistEntityStatusAC(todolistId, 'loading'))\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === id)\r\n        if (!task) {\r\n            alert('task not found in the state')\r\n            return\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: TaskPriorities.Low,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n\r\n        tasksAPI.updateTask(todolistId, id, apiModel)\r\n\r\n            .then((res) => {\r\n                if (res.data.resultCode === ResultResponseCodes.success) {\r\n                    dispatch(updateTaskAC(id, domainModel, todolistId))\r\n                    dispatch(changeTodolistEntityStatusAC(todolistId, 'succeeded'))\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            })\r\n            .catch((error: AxiosError) => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n    }\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    description?: string\r\n    title?: string\r\n    status?: number\r\n    priority?: number\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\ntype ActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | ReturnType<typeof setTasksAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType\r\n    | SetAppStatusActionType\r\n    | SetAppErrorActionType\r\n    | ReturnType<typeof changeTodolistEntityStatusAC>","import {tasksReducer} from '../features/Todolists/tasks-reducer';\r\nimport {todolistsReducer} from '../features/Todolists/todolists-reducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport thunk from \"redux-thunk\";\r\nimport {appReducer} from './app-reducer'\r\nimport { authReducer } from '../features/Login/auth-reducer';\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk))\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store","import React, {ChangeEvent, KeyboardEvent, useState} from 'react'\r\nimport {IconButton, TextField} from '@material-ui/core'\r\nimport {AddBox} from '@material-ui/icons'\r\n\r\nexport type AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function({addItem, disabled = false}: AddItemFormPropsType) {\r\n\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null)\r\n        }\r\n        if (e.key === 'Enter') {\r\n            addItemHandler()\r\n        }\r\n    }\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== '') {\r\n            addItem(title.trim())\r\n            setTitle('')\r\n        } else {\r\n            setError('Title is required')\r\n        }\r\n    }\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n                   disabled={disabled}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\nexport type EditableSpanPropsType = {\r\n    title: string\r\n    onChange: (newTitle: string) => void\r\n    disabled: boolean\r\n}\r\n\r\n\r\nexport const EditableSpan = React.memo((props: EditableSpanPropsType) => {\r\n\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [title, setTitle] = useState(\"\")\r\n\r\n    const activateEditMode = () => {\r\n        !props.disabled && setEditMode(true)\r\n        setTitle(props.title)\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false)\r\n        props.onChange(title)\r\n    }\r\n    const onChangeTitleHandler = (e:ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n        return editMode\r\n        ? <TextField value={title} onChange={onChangeTitleHandler} autoFocus onBlur={activateViewMode}/>\r\n        : <span onDoubleClick={activateEditMode}>{props.title}</span>\r\n})","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {EditableSpan} from \"../../../../components/EditableSpan/EditableSpan\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {TaskStatuses, TaskType} from \"../../../../api/tasks-api\";\r\nimport {RequestStatusType} from '../../../../app/app-reducer'\r\n\r\nexport type TaskPropsType = {\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (id: string, newTitle: string, todolistId: string) => void\r\n    task: TaskType\r\n    todolistId: string\r\n    entityStatus: RequestStatusType\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n\r\n    const {task, changeTaskStatus, changeTaskTitle, removeTask, todolistId} = props\r\n\r\n    const onClickHandler = useCallback(() => removeTask(task.id, todolistId), [removeTask, task.id, todolistId])\r\n    const onChangeStatusHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        changeTaskStatus(task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, todolistId)\r\n    }, [changeTaskStatus, task.id, todolistId])\r\n    const onChangeTitleHandler = useCallback((newTitle: string) => {\r\n        changeTaskTitle(task.id, newTitle, todolistId)\r\n    }, [changeTaskTitle, task.id, todolistId])\r\n\r\n    return <div key={task.id}\r\n                className={task.status === TaskStatuses.Completed ? \"is-done\" : \"\"}\r\n    >\r\n        <Checkbox color=\"primary\"\r\n                  onChange={onChangeStatusHandler}\r\n                  checked={task.status === TaskStatuses.Completed}\r\n        />\r\n        <EditableSpan title={task.title}\r\n                      onChange={onChangeTitleHandler}\r\n                      disabled={props.entityStatus === 'loading'}\r\n        />\r\n        <IconButton onClick={onClickHandler} disabled={props.entityStatus === 'loading'}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n\r\n\r\n\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport {Button, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task/Task'\r\nimport {TaskStatuses, TaskType} from '../../../api/tasks-api'\r\nimport {FilterValuesType} from '../todolists-reducer'\r\nimport {useDispatch} from 'react-redux'\r\nimport {fetchTasksTC} from '../tasks-reducer'\r\nimport {RequestStatusType} from '../../../app/app-reducer'\r\n\r\ntype TodolistType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (todolistId: string) => void\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (id: string, newTitle: string, todolistId: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n    demo?: boolean\r\n}\r\n\r\n\r\nconst Todolist = React.memo(({demo = false, ...props}: TodolistType) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (!demo) {\r\n            dispatch(fetchTasksTC(props.id))\r\n        } else {\r\n            return\r\n        }\r\n    }, [])\r\n\r\n    const {\r\n        id, changeFilter, addTask: addTaskFromProps, changeTodolistTitle: changetdltitle\r\n    } = props\r\n\r\n    const removeTodolist = () => props.removeTodolist(props.id)\r\n    const changeTodolistTitle = useCallback((newTitle: string) => changetdltitle(id, newTitle), [changetdltitle, id])\r\n    const addTask = useCallback((title: string) => addTaskFromProps(title, id), [addTaskFromProps, id])\r\n\r\n    const onAllClickHandler = useCallback(() => {\r\n        changeFilter('all', id)\r\n    }, [changeFilter, id])\r\n    const onActiveClickHandler = useCallback(() => {\r\n        changeFilter('active', id)\r\n    }, [changeFilter, id])\r\n    const onCompletedClickHandler = useCallback(() => {\r\n        changeFilter('completed', id)\r\n    }, [changeFilter, id])\r\n\r\n    let tasksForTodoList = props.tasks\r\n\r\n    if (props.filter === 'active') {\r\n        tasksForTodoList = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.filter === 'completed') {\r\n        tasksForTodoList = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n    return <div>\r\n        <h3>\r\n            <EditableSpan title={props.title} onChange={changeTodolistTitle}\r\n                          disabled={props.entityStatus === 'loading'}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodoList.map(t => <Task\r\n                    task={t}\r\n                    changeTaskStatus={props.changeTaskStatus}\r\n                    changeTaskTitle={props.changeTaskTitle}\r\n                    removeTask={props.removeTask}\r\n                    todolistId={props.id}\r\n                    key={t.id}\r\n                    entityStatus={props.entityStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}\r\n            >Active\r\n            </Button>\r\n            <Button variant={props.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}\r\n            >Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\nexport default Todolist\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport {addTaskTC, deleteTasksTC, updateTaskTC} from './tasks-reducer'\r\nimport {TaskStatuses, TaskType} from '../../api/tasks-api'\r\nimport {Grid, Paper} from '@material-ui/core'\r\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm'\r\nimport Todolist from './Todolist/Todolist'\r\nimport {TasksStateType} from '../../app/App'\r\nimport {RequestStatusType} from '../../app/app-reducer'\r\nimport {Redirect} from 'react-router-dom'\r\n\r\ntype TodolistsListType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<TodolistsListType> = ({demo = false}) => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return\r\n        }\r\n        dispatch(fetchTodolistsTC())\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string, todolistId: string) => {\r\n        dispatch(addTaskTC(title, todolistId))\r\n    }, [dispatch])\r\n\r\n    const changeStatus = useCallback((id: string, status: TaskStatuses, todolistId: string) => {\r\n        dispatch(updateTaskTC(id, {status}, todolistId))\r\n    }, [dispatch])\r\n\r\n    const changeTaskTitle = useCallback((id: string, newTitle: string, todolistId: string) => {\r\n        dispatch(updateTaskTC(id, {title: newTitle}, todolistId))\r\n    }, [dispatch])\r\n\r\n    const changeFilter = useCallback((value: FilterValuesType, todolistId: string) => {\r\n        dispatch(changeTodolistFilterAC(value, todolistId))\r\n    }, [dispatch])\r\n\r\n    const removeTask = useCallback((id: string, todolistId: string) => {\r\n        dispatch(deleteTasksTC(id, todolistId))\r\n    }, [dispatch])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        dispatch(addTodolistTC(title))\r\n    }, [dispatch])\r\n\r\n    const changeTodolistTitle = useCallback((id: string, newTitle: string) => {\r\n        dispatch(changeTodolistTC(id, newTitle))\r\n    }, [dispatch])\r\n\r\n    const removeTodolist = useCallback((todolistId: string) => {\r\n        dispatch(removeTodolistTC(todolistId))\r\n    }, [dispatch])\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={\"/login\"} />\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Grid container={true} style={{padding: '15px'}}>\r\n                <AddItemForm addItem={addTodolist} disabled={status === 'loading'}/>\r\n            </Grid>\r\n            <Grid container={true} spacing={5}>\r\n                {\r\n                    todolists.map(tl => {\r\n                        let allTodolistTasks = tasks[tl.id]\r\n\r\n                        return <Grid item key={tl.id}>\r\n                            <Paper elevation={10} style={{padding: '15px', borderRadius: '10px'}}>\r\n                                <Todolist\r\n                                    id={tl.id}\r\n                                    title={tl.title}\r\n                                    filter={tl.filter}\r\n                                    entityStatus={tl.entityStatus}\r\n                                    tasks={allTodolistTasks}\r\n                                    removeTask={removeTask}\r\n                                    changeFilter={changeFilter}\r\n                                    addTask={addTask}\r\n                                    changeTaskStatus={changeStatus}\r\n                                    removeTodolist={removeTodolist}\r\n                                    changeTaskTitle={changeTaskTitle}\r\n                                    changeTodolistTitle={changeTodolistTitle}\r\n                                    demo={demo}\r\n                                />\r\n                            </Paper>\r\n                        </Grid>\r\n                    })\r\n                }\r\n            </Grid>\r\n        </>)\r\n}","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {setAppErrorAC} from '../../app/app-reducer'\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error);\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppErrorAC(null));\r\n    }\r\n\r\n    const isOpen = error !== null;\r\n\r\n    return (\r\n        <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid} from '@material-ui/core'\r\nimport {useFormik} from 'formik'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {loginTC} from './auth-reducer'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {Redirect} from 'react-router-dom'\r\n\r\nexport const Login = () => {\r\n    const dispatch = useDispatch()\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    const formik = useFormik({\r\n        validate: (values) => {\r\n            if (!values.email) {\r\n                return {\r\n                    email: 'Email is required'\r\n                }\r\n            }\r\n            if (!values.password) {\r\n                return {\r\n                    password: 'Password is required'\r\n                }\r\n            }\r\n        },\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n        },\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={'/'}/>\r\n    }\r\n\r\n\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>\r\n                            To log in get registered <a href={'https://social-network.samuraijs.com/'}\r\n                                                        target={'_blank'}>here</a>\r\n                        </p>\r\n                        <p>\r\n                            or use common test account credentials:\r\n                        </p>\r\n                        <p> Email: free@samuraijs.com\r\n                        </p>\r\n                        <p>\r\n                            Password: free\r\n                        </p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n                        {formik.errors.email ? <div>{formik.errors.email}</div> : null}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('password')}\r\n                        />\r\n                        {formik.errors.password ? <div>{formik.errors.password}</div> : null}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox\r\n                                {...formik.getFieldProps('rememberMe')}\r\n                                checked={formik.values.rememberMe}\r\n                            />}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport './App.css'\r\nimport {\r\n    AppBar,\r\n    Button,\r\n    CircularProgress,\r\n    Container,\r\n    IconButton,\r\n    LinearProgress,\r\n    Toolbar,\r\n    Typography\r\n} from '@material-ui/core'\r\nimport {Menu} from '@material-ui/icons'\r\nimport {TaskType} from '../api/tasks-api'\r\nimport {TodolistsList} from '../features/Todolists/TodolistsList'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from './store'\r\nimport {initializeAppTC, RequestStatusType} from './app-reducer'\r\nimport {ErrorSnackbar} from '../components/ErrorSnackbar/ErrorSnackbar'\r\nimport {HashRouter, Redirect, Route, Switch} from 'react-router-dom'\r\nimport {Login} from '../features/Login/Login'\r\nimport {logoutTC} from '../features/Login/auth-reducer'\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\nexport type PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nconst App = React.memo(({demo = false}: PropsType) => {\r\n    const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status)\r\n    const isInitialized = useSelector<AppRootStateType, boolean>((state) => state.app.isInitialized)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [])\r\n\r\n    const logoutHandler = useCallback(() => {\r\n        dispatch(logoutTC())\r\n    }, [])\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <HashRouter>\r\n            <div className=\"App\">\r\n                <AppBar position=\"static\">\r\n                    <Toolbar>\r\n                        <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                            <Menu/>\r\n                        </IconButton>\r\n                        <Typography variant=\"h6\">\r\n                            News\r\n                        </Typography>\r\n                        {isLoggedIn && <Button color=\"inherit\" onClick={logoutHandler}>Log out</Button>}\r\n                    </Toolbar>\r\n                </AppBar>\r\n\r\n                {status === 'loading' && <LinearProgress color=\"secondary\"/>}\r\n\r\n                <Container fixed={true}>\r\n                    <Switch>\r\n                        <Route exact path={'/'} render={() => <TodolistsList demo={demo}/>}/>\r\n                        <Route path={'/login'} render={() => <Login/>}/>\r\n                        <Route path={'/404'} render={() => <h1>404. Page not found</h1>}/>\r\n                        <Redirect from={'*'} to={'/404'}/>\r\n                    </Switch>\r\n                </Container>\r\n                <ErrorSnackbar/>\r\n            </div>\r\n        </HashRouter>\r\n    )\r\n})\r\n\r\nexport default App\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {store} from './app/store';\r\nimport {Provider} from 'react-redux';\r\nimport App from \"./app/App\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App/>\r\n    </Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n\r\n"],"sourceRoot":""}