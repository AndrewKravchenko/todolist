{"version":3,"sources":["serviceWorker.ts","api/tasks-api.ts","api/todolist-api.ts","utils/error-utils.ts","features/Login/auth-reducer.ts","app/app-reducer.ts","features/Todolists/todolists-reducer.ts","features/Todolists/tasks-reducer.ts","app/store.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/Todolists/Todolist/Task/Task.tsx","features/Todolists/Todolist/Todolist.tsx","features/Todolists/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Login/Login.tsx","app/App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistAPI","todolistId","title","put","delete","post","get","authAPI","data","handleServerAppError","dispatch","messages","length","setAppErrorAC","error","setAppStatusAC","status","handleServerNetworkError","message","slice","createSlice","name","initialState","isLoggedIn","reducers","setIsLoggedInAC","state","action","payload","value","authReducer","reducer","actions","isInitialized","setAppInitializedAC","appReducer","v1","removeTodolistAC","index","findIndex","tl","id","splice","addTodolistAC","unshift","todolist","filter","entityStatus","changeTodolistTitleAC","changeTodolistFilterAC","changeTodolistEntityStatusAC","setTodolistsAC","todolists","map","todolistsReducer","tasksAPI","taskId","model","ResultResponseCodes","removeTaskAC","tasks","t","addTaskAC","todoListId","updateTaskAC","setTasksAC","extraReducers","builder","addCase","forEach","tasksReducer","updateTaskTC","getState","task","find","apiModel","deadline","description","priority","Low","startDate","then","res","resultCode","success","catch","alert","rootReducer","combineReducers","app","auth","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","AddItemForm","React","memo","addItem","disabled","useState","setTitle","setError","addItemHandler","trim","TextField","variant","onChange","e","currentTarget","onKeyPress","key","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","props","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","changeTaskStatus","changeTaskTitle","removeTask","onClickHandler","useCallback","onChangeStatusHandler","newIsDoneValue","checked","Completed","New","onChangeTitleHandler","newTitle","className","Checkbox","Delete","Todolist","demo","useDispatch","useEffect","items","changeFilter","addTaskFromProps","addTask","changetdltitle","changeTodolistTitle","onAllClickHandler","onActiveClickHandler","onCompletedClickHandler","tasksForTodoList","removeTodolist","style","paddingTop","Button","TodolistsList","useSelector","item","addTaskTC","changeStatus","deleteTasksTC","addTodolist","addTodolistTC","removeTodolistTC","Grid","container","padding","spacing","allTodolistTasks","Paper","elevation","borderRadius","to","Alert","ErrorSnackbar","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","Login","formik","useFormik","validate","values","email","password","initialValues","rememberMe","onSubmit","justify","xs","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","errors","type","FormControlLabel","control","App","logoutHandler","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","exact","path","render","from","top","textAlign","width","CircularProgress","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.e91329dd.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {instance} from './todolist-api'\r\n\r\n\r\n// api\r\nexport const tasksAPI = {\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponseType>(`todo-lists/${todolistId}/tasks`)\r\n    },\r\n    deleteTasks(todolistId: string, taskId: string) {\r\n        return instance.delete<BaseResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n    },\r\n    createTasks(todolistId: string, title: string) {\r\n        return instance.post<BaseResponseType<{item: TaskType}>>(`todo-lists/${todolistId}/tasks`, {title})\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<BaseResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model)\r\n    }\r\n}\r\n\r\n// types\r\nexport enum TaskStatuses {\r\n    New,\r\n    InProgress,\r\n    Completed,\r\n    Draft\r\n}\r\nexport enum TaskPriorities {\r\n    Low,\r\n    Middle,\r\n    Hi,\r\n    Urgently,\r\n    Later\r\n}\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    description: string\r\n    title: string\r\n    status: number\r\n    priority: number\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponseType = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\ntype BaseResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}","import axios from \"axios\";\r\n\r\nconst settings = {\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.1/\",\r\n    withCredentials: true,\r\n    headers: {\r\n        \"API-KEY\": \"42c688ff-b242-4cda-ac99-6e02679c3ff4\"\r\n    }\r\n}\r\n\r\n\r\nexport const instance = axios.create({\r\n        ...settings\r\n    })\r\n\r\n// api\r\nexport const todolistAPI = {\r\n    updateTodolist(todolistId: string, title: string) {\r\n        return instance.put<BaseResponseType>(`todo-lists/${todolistId}`, {title})\r\n    },\r\n    deleteTodolist(todolistId: string) {\r\n        return instance.delete<BaseResponseType>(`todo-lists/${todolistId}`)\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<BaseResponseType<{item: TodolistType}>>(`todo-lists`, {title})\r\n    },\r\n    postTodolist() {\r\n        return instance.get<Array<TodolistType>>(`todo-lists`)\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        const promise = instance.post<BaseResponseType<{userId?: number}>>('auth/login', data);\r\n        return promise;\r\n    },\r\n    logout() {\r\n        const promise = instance.delete<BaseResponseType<{userId?: number}>>('auth/login');\r\n        return promise;\r\n    },\r\n    me() {\r\n        const promise =  instance.get<BaseResponseType<{id: number; email: string; login: string}>>('auth/me');\r\n        return promise\r\n    }\r\n}\r\n\r\n// types\r\nexport type TodolistType= {\r\n    id: string\r\n    addedDate: string\r\n    order: number\r\n    title: string\r\n}\r\n\r\nexport type BaseResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}","import {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../app/app-reducer'\r\nimport {BaseResponseType} from '../api/todolist-api'\r\nimport {Dispatch} from 'redux'\r\n\r\nexport const handleServerAppError = <D>(data: BaseResponseType<D>, dispatch:\r\n    Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC({error: data.messages[0]}))\r\n    } else {\r\n        dispatch(setAppErrorAC({error: 'Some error occurred'}))\r\n    }\r\n    dispatch(setAppStatusAC({status: 'failed'}))\r\n}\r\n\r\nexport const handleServerNetworkError = (\r\n    error: { message: string },\r\n    dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppErrorAC({error: error.message ? error.message : 'Some error occurred'}))\r\n    dispatch(setAppStatusAC({status: 'failed'}))\r\n}\r\n","import {Dispatch} from 'redux'\r\nimport {setAppStatusAC} from '../../app/app-reducer'\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils'\r\nimport {authAPI, LoginParamsType} from '../../api/todolist-api'\r\nimport {createSlice, PayloadAction} from '@reduxjs/toolkit'\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: 'auth',\r\n    initialState,\r\n    reducers: {\r\n        setIsLoggedInAC(state, action: PayloadAction<{value: boolean}>) {\r\n            state.isLoggedIn = action.payload.value\r\n        }\r\n    }\r\n})\r\n\r\nexport const authReducer = slice.reducer;\r\nexport const {setIsLoggedInAC} = slice.actions;\r\n\r\n// thunks\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    authAPI.login(data)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC({value: true}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const logoutTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    authAPI.logout()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC({value: false}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n","import {Dispatch} from 'redux'\r\nimport {setIsLoggedInAC} from '../features/Login/auth-reducer'\r\nimport {authAPI} from '../api/todolist-api'\r\nimport {createSlice, PayloadAction} from '@reduxjs/toolkit'\r\n\r\nconst initialState: InitialStateType = {\r\n    status: 'idle',\r\n    error: null,\r\n    isInitialized: false\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: 'app',\r\n    initialState,\r\n    reducers: {\r\n        setAppStatusAC(state, action: PayloadAction<{ status: RequestStatusType }>) {\r\n            state.status = action.payload.status\r\n        },\r\n        setAppErrorAC(state, action: PayloadAction<{ error: string | null }>) {\r\n            state.error = action.payload.error\r\n        },\r\n        setAppInitializedAC(state, action: PayloadAction<{ isInitialized: boolean }>) {\r\n            state.isInitialized = action.payload.isInitialized\r\n        }\r\n    }\r\n})\r\nexport const appReducer = slice.reducer\r\nexport const {setAppStatusAC, setAppErrorAC, setAppInitializedAC} = slice.actions\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type InitialStateType = {\r\n    // происходит ли сейчас взаимодействие с сервером\r\n    status: RequestStatusType\r\n    // если ошибка какая-то глобальная произойдёт - мы запишем текст ошибки сюда\r\n    error: string | null\r\n    // true когда приложение проинициализировалось (проверили юзера, настройки получили и т.д.)\r\n    isInitialized: boolean\r\n}\r\n\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n    authAPI.me().then(res => {\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedInAC({value: true}))\r\n        } else {\r\n        }\r\n        dispatch(setAppInitializedAC({isInitialized: true}))\r\n    })\r\n}\r\n\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\n","import {v1} from 'uuid'\r\nimport {todolistAPI, TodolistType} from '../../api/todolist-api'\r\nimport {Dispatch} from 'redux'\r\nimport {RequestStatusType, setAppStatusAC} from '../../app/app-reducer'\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils'\r\nimport {AxiosError} from 'axios'\r\nimport {createSlice, PayloadAction} from '@reduxjs/toolkit'\r\n\r\n\r\nexport let todolistId1 = v1()\r\nexport let todolistId2 = v1()\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nconst slice = createSlice({\r\n    name: 'todolists',\r\n    initialState,\r\n    reducers: {\r\n        removeTodolistAC(state, action: PayloadAction<{ todolistId: string }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.todolistId)\r\n            if (index > -1) {\r\n                state.splice(index, 1)\r\n            }\r\n        },\r\n        addTodolistAC(state, action: PayloadAction<{ todolist: TodolistType }>) {\r\n            state.unshift({...action.payload.todolist, filter: 'all', entityStatus: 'idle'})\r\n        },\r\n        changeTodolistTitleAC(state, action: PayloadAction<{ todolistId: string, title: string }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.todolistId)\r\n            state[index].title = action.payload.title\r\n        },\r\n        changeTodolistFilterAC(state, action: PayloadAction<{ filter: FilterValuesType, todolistId: string }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.todolistId)\r\n            state[index].filter = action.payload.filter\r\n        },\r\n        changeTodolistEntityStatusAC(state, action: PayloadAction<{ id: string, status: RequestStatusType }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].entityStatus = action.payload.status\r\n        },\r\n        setTodolistsAC(state, action: PayloadAction<{ todolists: Array<TodolistType> }>) {\r\n            return action.payload.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        }\r\n    }\r\n})\r\nexport const todolistsReducer = slice.reducer\r\nexport const {\r\n    removeTodolistAC,\r\n    addTodolistAC,\r\n    changeTodolistTitleAC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistEntityStatusAC,\r\n    setTodolistsAC\r\n} = slice.actions\r\n\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    todolistAPI.postTodolist()\r\n        .then((res) => {\r\n            dispatch(setTodolistsAC({todolists: res.data}))\r\n            dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        })\r\n        .catch(error => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    dispatch(changeTodolistEntityStatusAC({id: todolistId, status: 'loading'}))\r\n    todolistAPI.deleteTodolist(todolistId)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(removeTodolistAC({todolistId}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error: AxiosError) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const addTodolistTC = (title: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    todolistAPI.createTodolist(title)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(addTodolistAC({todolist: res.data.data.item}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error: AxiosError) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const changeTodolistTC = (todolistId: string, title: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    todolistAPI.updateTodolist(todolistId, title)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(changeTodolistTitleAC({todolistId, title}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error: AxiosError) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\n// types\r\nexport type FilterValuesType = 'all' | 'active' | 'completed'\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n","import {addTodolistAC, changeTodolistEntityStatusAC, removeTodolistAC, setTodolistsAC} from './todolists-reducer'\r\nimport {TasksStateType} from '../../app/App'\r\nimport {TaskPriorities, tasksAPI, TaskType, UpdateTaskModelType} from '../../api/tasks-api'\r\nimport {Dispatch} from 'redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {setAppStatusAC} from '../../app/app-reducer'\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils'\r\nimport {AxiosError} from 'axios'\r\nimport {createSlice, PayloadAction} from '@reduxjs/toolkit'\r\n\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nconst slice = createSlice({\r\n    name: 'tasks',\r\n    initialState,\r\n    reducers: {\r\n        removeTaskAC(state, action: PayloadAction<{ taskId: string, todolistId: string }>) {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                tasks.splice(index, 1)\r\n            }\r\n        },\r\n        addTaskAC(state, action: PayloadAction<TaskType>) {\r\n            state[action.payload.todoListId].unshift(action.payload)\r\n        },\r\n        updateTaskAC(state, action: PayloadAction<{ taskId: string, model: UpdateDomainTaskModelType, todolistId: string }>) {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                tasks[index] = {...tasks[index], ...action.payload.model}\r\n            }\r\n        },\r\n        setTasksAC(state, action: PayloadAction<{ tasks: Array<TaskType>, todolistId: string }>) {\r\n            state[action.payload.todolistId] = action.payload.tasks\r\n        }\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(addTodolistAC, (state, action) => {\r\n            state[action.payload.todolist.id] = []\r\n        })\r\n        builder.addCase(removeTodolistAC, (state, action) => {\r\n            delete state[action.payload.todolistId]\r\n        })\r\n        builder.addCase(setTodolistsAC, (state, action) => {\r\n            action.payload.todolists.forEach(tl => {\r\n                state[tl.id] = []\r\n            })\r\n        })\r\n    }\r\n})\r\nexport const tasksReducer = slice.reducer\r\nexport const {\r\n    removeTaskAC,\r\n    addTaskAC,\r\n    updateTaskAC,\r\n    setTasksAC\r\n} = slice.actions\r\n\r\nenum ResultResponseCodes {\r\n    'success' = 0,\r\n    'failed' = 1,\r\n    'captcha' = 2\r\n}\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    tasksAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            dispatch(setTasksAC({tasks, todolistId}))\r\n            dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        })\r\n        .catch(error => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const deleteTasksTC = (taskId: string, todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    dispatch(changeTodolistEntityStatusAC({id: todolistId, status: 'loading'}))\r\n    tasksAPI.deleteTasks(todolistId, taskId)\r\n        .then((res) => {\r\n            if (res.data.resultCode === ResultResponseCodes.success) {\r\n                dispatch(removeTaskAC({taskId, todolistId}))\r\n                dispatch(changeTodolistEntityStatusAC({id: todolistId, status: 'succeeded'}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error: AxiosError) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    dispatch(changeTodolistEntityStatusAC({id: todolistId, status: 'loading'}))\r\n    tasksAPI.createTasks(todolistId, title)\r\n        .then((res) => {\r\n            if (res.data.resultCode === ResultResponseCodes.success) {\r\n                const task = res.data.data.item\r\n                dispatch(addTaskAC(task))\r\n                dispatch(changeTodolistEntityStatusAC({id: todolistId, status: 'succeeded'}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error: AxiosError) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const updateTaskTC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        dispatch(changeTodolistEntityStatusAC({id: todolistId, status: 'loading'}))\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            alert('task not found in the state')\r\n            return\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: TaskPriorities.Low,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...model\r\n        }\r\n\r\n        tasksAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then((res) => {\r\n                if (res.data.resultCode === ResultResponseCodes.success) {\r\n                    dispatch(updateTaskAC({taskId, model, todolistId}))\r\n                    dispatch(changeTodolistEntityStatusAC({id: todolistId, status: 'succeeded'}))\r\n                    dispatch(setAppStatusAC({status: 'succeeded'}))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            })\r\n            .catch((error: AxiosError) => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n    }\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    description?: string\r\n    title?: string\r\n    status?: number\r\n    priority?: number\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\n","import {tasksReducer} from '../features/Todolists/tasks-reducer'\r\nimport {todolistsReducer} from '../features/Todolists/todolists-reducer'\r\nimport {combineReducers} from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {appReducer} from './app-reducer'\r\nimport {authReducer} from '../features/Login/auth-reducer'\r\nimport {configureStore} from '@reduxjs/toolkit'\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n// непосредственно создаём store\r\n\r\nexport type RootReducerType = typeof rootReducer\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: getDefaultMiddleware => getDefaultMiddleware().prepend(thunkMiddleware)\r\n})\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<RootReducerType>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store","import React, {ChangeEvent, KeyboardEvent, useState} from 'react'\r\nimport {IconButton, TextField} from '@material-ui/core'\r\nimport {AddBox} from '@material-ui/icons'\r\n\r\nexport type AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function({addItem, disabled = false}: AddItemFormPropsType) {\r\n\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null)\r\n        }\r\n        if (e.key === 'Enter') {\r\n            addItemHandler()\r\n        }\r\n    }\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== '') {\r\n            addItem(title.trim())\r\n            setTitle('')\r\n        } else {\r\n            setError('Title is required')\r\n        }\r\n    }\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n                   disabled={disabled}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\nexport type EditableSpanPropsType = {\r\n    title: string\r\n    onChange: (newTitle: string) => void\r\n    disabled: boolean\r\n}\r\n\r\n\r\nexport const EditableSpan = React.memo((props: EditableSpanPropsType) => {\r\n\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [title, setTitle] = useState(\"\")\r\n\r\n    const activateEditMode = () => {\r\n        !props.disabled && setEditMode(true)\r\n        setTitle(props.title)\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false)\r\n        props.onChange(title)\r\n    }\r\n    const onChangeTitleHandler = (e:ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n        return editMode\r\n        ? <TextField value={title} onChange={onChangeTitleHandler} autoFocus onBlur={activateViewMode}/>\r\n        : <span onDoubleClick={activateEditMode}>{props.title}</span>\r\n})","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {EditableSpan} from \"../../../../components/EditableSpan/EditableSpan\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {TaskStatuses, TaskType} from \"../../../../api/tasks-api\";\r\nimport {RequestStatusType} from '../../../../app/app-reducer'\r\n\r\nexport type TaskPropsType = {\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (id: string, newTitle: string, todolistId: string) => void\r\n    task: TaskType\r\n    todolistId: string\r\n    entityStatus: RequestStatusType\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n\r\n    const {task, changeTaskStatus, changeTaskTitle, removeTask, todolistId} = props\r\n\r\n    const onClickHandler = useCallback(() => removeTask(task.id, todolistId), [removeTask, task.id, todolistId])\r\n    const onChangeStatusHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        changeTaskStatus(task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, todolistId)\r\n    }, [changeTaskStatus, task.id, todolistId])\r\n    const onChangeTitleHandler = useCallback((newTitle: string) => {\r\n        changeTaskTitle(task.id, newTitle, todolistId)\r\n    }, [changeTaskTitle, task.id, todolistId])\r\n\r\n    return <div key={task.id}\r\n                className={task.status === TaskStatuses.Completed ? \"is-done\" : \"\"}\r\n    >\r\n        <Checkbox color=\"primary\"\r\n                  onChange={onChangeStatusHandler}\r\n                  checked={task.status === TaskStatuses.Completed}\r\n        />\r\n        <EditableSpan title={task.title}\r\n                      onChange={onChangeTitleHandler}\r\n                      disabled={props.entityStatus === 'loading'}\r\n        />\r\n        <IconButton onClick={onClickHandler} disabled={props.entityStatus === 'loading'}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n\r\n\r\n\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport {Button, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task/Task'\r\nimport {TaskStatuses, TaskType} from '../../../api/tasks-api'\r\nimport {FilterValuesType} from '../todolists-reducer'\r\nimport {useDispatch} from 'react-redux'\r\nimport {fetchTasksTC} from '../tasks-reducer'\r\nimport {RequestStatusType} from '../../../app/app-reducer'\r\n\r\ntype TodolistType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (todolistId: string) => void\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (id: string, newTitle: string, todolistId: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n    demo?: boolean\r\n}\r\n\r\n\r\nconst Todolist = React.memo(({demo = false, ...props}: TodolistType) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (!demo) {\r\n            dispatch(fetchTasksTC(props.id))\r\n        } else {\r\n            return\r\n        }\r\n    }, [])\r\n\r\n    const {\r\n        id, changeFilter, addTask: addTaskFromProps, changeTodolistTitle: changetdltitle\r\n    } = props\r\n\r\n    const removeTodolist = () => props.removeTodolist(props.id)\r\n    const changeTodolistTitle = useCallback((newTitle: string) => changetdltitle(id, newTitle), [changetdltitle, id])\r\n    const addTask = useCallback((title: string) => addTaskFromProps(title, id), [addTaskFromProps, id])\r\n\r\n    const onAllClickHandler = useCallback(() => {\r\n        changeFilter('all', id)\r\n    }, [changeFilter, id])\r\n    const onActiveClickHandler = useCallback(() => {\r\n        changeFilter('active', id)\r\n    }, [changeFilter, id])\r\n    const onCompletedClickHandler = useCallback(() => {\r\n        changeFilter('completed', id)\r\n    }, [changeFilter, id])\r\n\r\n    let tasksForTodoList = props.tasks\r\n\r\n    if (props.filter === 'active') {\r\n        tasksForTodoList = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.filter === 'completed') {\r\n        tasksForTodoList = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n    return <div>\r\n        <h3>\r\n            <EditableSpan title={props.title} onChange={changeTodolistTitle}\r\n                          disabled={props.entityStatus === 'loading'}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodoList.map(t => <Task\r\n                    task={t}\r\n                    changeTaskStatus={props.changeTaskStatus}\r\n                    changeTaskTitle={props.changeTaskTitle}\r\n                    removeTask={props.removeTask}\r\n                    todolistId={props.id}\r\n                    key={t.id}\r\n                    entityStatus={props.entityStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}\r\n            >Active\r\n            </Button>\r\n            <Button variant={props.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}\r\n            >Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\nexport default Todolist\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport {addTaskTC, deleteTasksTC, updateTaskTC} from './tasks-reducer'\r\nimport {TaskStatuses} from '../../api/tasks-api'\r\nimport {Grid, Paper} from '@material-ui/core'\r\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm'\r\nimport Todolist from './Todolist/Todolist'\r\nimport {TasksStateType} from '../../app/App'\r\nimport {RequestStatusType} from '../../app/app-reducer'\r\nimport {Redirect} from 'react-router-dom'\r\n\r\ntype TodolistsListType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<TodolistsListType> = ({demo = false}) => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return\r\n        }\r\n        dispatch(fetchTodolistsTC())\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string, todolistId: string) => {\r\n        dispatch(addTaskTC(title, todolistId))\r\n    }, [dispatch])\r\n\r\n    const changeStatus = useCallback((id: string, status: TaskStatuses, todolistId: string) => {\r\n        dispatch(updateTaskTC(id, {status}, todolistId))\r\n    }, [dispatch])\r\n\r\n    const changeTaskTitle = useCallback((id: string, newTitle: string, todolistId: string) => {\r\n        dispatch(updateTaskTC(id, {title: newTitle}, todolistId))\r\n    }, [dispatch])\r\n\r\n    const changeFilter = useCallback((value: FilterValuesType, todolistId: string) => {\r\n        dispatch(changeTodolistFilterAC({filter: value, todolistId}))\r\n    }, [dispatch])\r\n\r\n    const removeTask = useCallback((id: string, todolistId: string) => {\r\n        dispatch(deleteTasksTC(id, todolistId))\r\n    }, [dispatch])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        dispatch(addTodolistTC(title))\r\n    }, [dispatch])\r\n\r\n    const changeTodolistTitle = useCallback((id: string, newTitle: string) => {\r\n        dispatch(changeTodolistTC(id, newTitle))\r\n    }, [dispatch])\r\n\r\n    const removeTodolist = useCallback((todolistId: string) => {\r\n        dispatch(removeTodolistTC(todolistId))\r\n    }, [dispatch])\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={\"/login\"} />\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Grid container={true} style={{padding: '15px'}}>\r\n                <AddItemForm addItem={addTodolist} disabled={status === 'loading'}/>\r\n            </Grid>\r\n            <Grid container={true} spacing={5}>\r\n                {\r\n                    todolists.map(tl => {\r\n                        let allTodolistTasks = tasks[tl.id]\r\n\r\n                        return <Grid item key={tl.id}>\r\n                            <Paper elevation={10} style={{padding: '15px', borderRadius: '10px'}}>\r\n                                <Todolist\r\n                                    id={tl.id}\r\n                                    title={tl.title}\r\n                                    filter={tl.filter}\r\n                                    entityStatus={tl.entityStatus}\r\n                                    tasks={allTodolistTasks}\r\n                                    removeTask={removeTask}\r\n                                    changeFilter={changeFilter}\r\n                                    addTask={addTask}\r\n                                    changeTaskStatus={changeStatus}\r\n                                    removeTodolist={removeTodolist}\r\n                                    changeTaskTitle={changeTaskTitle}\r\n                                    changeTodolistTitle={changeTodolistTitle}\r\n                                    demo={demo}\r\n                                />\r\n                            </Paper>\r\n                        </Grid>\r\n                    })\r\n                }\r\n            </Grid>\r\n        </>)\r\n}\r\n","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {setAppErrorAC} from '../../app/app-reducer'\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error);\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppErrorAC({error: null}));\r\n    }\r\n\r\n    const isOpen = error !== null;\r\n\r\n    return (\r\n        <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid} from '@material-ui/core'\r\nimport {useFormik} from 'formik'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {loginTC} from './auth-reducer'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {Redirect} from 'react-router-dom'\r\n\r\nexport const Login = () => {\r\n    const dispatch = useDispatch()\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    const formik = useFormik({\r\n        validate: (values) => {\r\n            if (!values.email) {\r\n                return {\r\n                    email: 'Email is required'\r\n                }\r\n            }\r\n            if (!values.password) {\r\n                return {\r\n                    password: 'Password is required'\r\n                }\r\n            }\r\n        },\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n        },\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={'/'}/>\r\n    }\r\n\r\n\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>\r\n                            To log in get registered <a href={'https://social-network.samuraijs.com/'}\r\n                                                        target={'_blank'}>here</a>\r\n                        </p>\r\n                        <p>\r\n                            or use common test account credentials:\r\n                        </p>\r\n                        <p> Email: free@samuraijs.com\r\n                        </p>\r\n                        <p>\r\n                            Password: free\r\n                        </p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n                        {formik.errors.email ? <div>{formik.errors.email}</div> : null}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('password')}\r\n                        />\r\n                        {formik.errors.password ? <div>{formik.errors.password}</div> : null}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox\r\n                                {...formik.getFieldProps('rememberMe')}\r\n                                checked={formik.values.rememberMe}\r\n                            />}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport './App.css'\r\nimport {\r\n    AppBar,\r\n    Button,\r\n    CircularProgress,\r\n    Container,\r\n    IconButton,\r\n    LinearProgress,\r\n    Toolbar,\r\n    Typography\r\n} from '@material-ui/core'\r\nimport {Menu} from '@material-ui/icons'\r\nimport {TaskType} from '../api/tasks-api'\r\nimport {TodolistsList} from '../features/Todolists/TodolistsList'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from './store'\r\nimport {initializeAppTC, RequestStatusType} from './app-reducer'\r\nimport {ErrorSnackbar} from '../components/ErrorSnackbar/ErrorSnackbar'\r\nimport {Redirect, Route, Switch} from 'react-router-dom'\r\nimport {Login} from '../features/Login/Login'\r\nimport {logoutTC} from '../features/Login/auth-reducer'\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\nexport type PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nconst App = React.memo(({demo = false}: PropsType) => {\r\n    const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status)\r\n    const isInitialized = useSelector<AppRootStateType, boolean>((state) => state.app.isInitialized)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (!demo) {\r\n            dispatch(initializeAppTC())\r\n        }\r\n    }, [])\r\n\r\n    const logoutHandler = useCallback(() => {\r\n        dispatch(logoutTC())\r\n    }, [])\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n            <div className=\"App\">\r\n                <AppBar position=\"static\">\r\n                    <Toolbar>\r\n                        <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                            <Menu/>\r\n                        </IconButton>\r\n                        <Typography variant=\"h6\">\r\n                            News\r\n                        </Typography>\r\n                        {isLoggedIn && <Button color=\"inherit\" onClick={logoutHandler}>Log out</Button>}\r\n                    </Toolbar>\r\n                </AppBar>\r\n\r\n                {status === 'loading' && <LinearProgress color=\"secondary\"/>}\r\n\r\n                <Container fixed={true}>\r\n                    <Switch>\r\n                        <Route exact path={'/'} render={() => <TodolistsList demo={demo}/>}/>\r\n                        <Route path={'/login'} render={() => <Login/>}/>\r\n                        <Route path={'/404'} render={() => <h1>404. Page not found</h1>}/>\r\n                        <Redirect from={'*'} to={'/404'}/>\r\n                    </Switch>\r\n                </Container>\r\n                <ErrorSnackbar/>\r\n            </div>\r\n    )\r\n})\r\n\r\nexport default App\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport * as serviceWorker from './serviceWorker'\r\nimport {store} from './app/store'\r\nimport {Provider} from 'react-redux'\r\nimport App from './app/App'\r\nimport {HashRouter} from 'react-router-dom'\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <HashRouter>\r\n            <App/>\r\n        </HashRouter>\r\n    </Provider>, document.getElementById('root'))\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n\r\n"],"sourceRoot":""}